/**
 *      MULTI-TASKING: Executing several tasks simultaneously.
 *       Two Types
 *          -> Process Based:- Executing several tasks simultaneously where each task is a seperate independant process. This type is best suitable for OS level.
 *                         Eg • While typing a java program in the editor we can able to listen mp3 audio songs at the same time we can download a file from 
 *                              the net all these tasks are independent of each other and executing simultaneously and hence it is Process based multitasking.
 * 
 *          -> Thread Based:- Executing several tasks simultaneously where each task is a separate independent part of the same program. 
 *                              And each independent part is called a 'Thread'. This type is suitable for programatic level.
 *                      • When compared with 'C++', developing multithreading examples is very easy in java because java provides in built 
 *                        support for multithreading through a rich API (Thread, Runnable, ThreadGroup, ThreadLocal….etc)
 *      
 *      MULTI-THREADING: The process of executing multiple threads simultaneously. A thread is a light weight subprocess or small unit of a process.
 *                      • In multithreading on 10% of the work the programmer is required to do and 90% of the work will be down by java API.
 *                      • The main important application areas of multithreading are:
 *                          1) To implement multimedia graphics.
 *                          2) To develop animations.
 *                          3) To develop video games etc.
 * 
 *      Both of Multiprocessing & Multithreading are used to acheive multitasking which improves performance of the system by reducing reponse time.
 * 
 *      Two ways to create or instantiate a thread in Java:
 *          1) By extending Thread class (java.lang.*)
 *          2) By implementing Runnable Interface 
 * 
 *      Setting & Getting a name of a thread:
 *          1) Every thread in java has a name, explicitly provided by the programmer or automatically generated by the JVM.
 *          2) We can set and get a name of a thread as follows:
 *                  - public final void setName(String newname);
 *                  - public final String getName();
 * 
 */
class MyThread extends Thread{

}
class BaseConcepts{
    public static void main(String[] args) {
        MyThread t = new MyThread();
        System.out.println(Thread.currentThread().getName());
        System.out.println(t.getName());  
        Thread.currentThread().setName("BasicConcept's main method");
        t.setName("My Child Thread 0");
        System.out.println(Thread.currentThread().getName());
        System.out.println(t.getName());  
          
    }
}